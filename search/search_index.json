{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JACE \u2014 JSON Agent Context Envelope","text":"<p>Machine-first pages. Clean HTML for humans. Safer actions for both.</p> <p>Start here:</p> <ul> <li>Overview \u2014 what JACE is and why agent-first matters</li> <li>Getting Started \u2014 serve JACE to agents, HTML to humans</li> <li>Core Concepts \u2014 entities, props, affordances, presentation</li> <li>Real-World Usage \u2014 agents + browsers patterns</li> <li>Runtime / Sandbox \u2014 interact, not just read</li> <li>Security \u2014 dry runs, audit, idempotency, scopes</li> <li>FAQ</li> <li>Roadmap</li> </ul> <p>Author once in JSON. Serve <code>application/jace+json</code> to agents. Render accessible HTML for people. No scraping. Safe actions with <code>dry_run</code> + <code>audit_preview</code>.</p>"},{"location":"#versioning-negotiation","title":"Versioning &amp; Negotiation","text":"<ul> <li>Protocols: <code>JACE/0.1</code>. Servers MUST list supported protocols in a manifest <code>protocols</code> array (see discovery).</li> <li>Media type: <code>application/jace+json</code>. Servers MAY include a <code>profile</code> parameter to indicate the protocol profile, e.g. <code>Content-Type: application/jace+json;profile=\"https://example.com/profiles/JACE/0.1\"</code></li> <li>Client behavior on mismatch: If a client requires a newer protocol, it SHOULD fail fast with a clear message and link to docs.</li> <li>Server behavior on unknown client: If clients send <code>User-Agent</code> or <code>X-JACE-Client: &lt;name&gt;/&lt;version&gt;</code>, servers MAY log it but MUST NOT change semantics.</li> </ul>"},{"location":"#content-negotiation-precedence","title":"Content Negotiation Precedence","text":"<p>When both mechanisms are present:</p> <ol> <li><code>?format=jace|html</code> (highest precedence)</li> <li><code>audience=agent|human</code> (when supported on <code>/view</code>-style endpoints)</li> <li><code>Accept:</code> header (optionally with <code>profile=</code> parameter)</li> <li>Default: <code>text/html</code> (human)</li> </ol>"},{"location":"concepts/","title":"Core Concepts","text":""},{"location":"concepts/#entities","title":"Entities","text":"<p>Semantic units (e.g., <code>ticket</code>, <code>product</code>, <code>card</code>, <code>section</code>, <code>button</code>, <code>paragraph</code>). <code>type</code> is meaning, not layout. You may use HTML-like names for simple elements.</p> <p>ID scope: <code>id</code> MUST be unique within the view document. Use domain IDs inside <code>props</code> (e.g., <code>props.id: \"t_8129\"</code>) when stability across views is required.</p>"},{"location":"concepts/#props","title":"Props","text":"<p>Key/values per entity (strings, numbers, booleans, arrays/objects). Keep copy in <code>props</code>, optionally with lightweight Markdown (e.g., <code>title_md</code>, <code>content_md</code>).</p>"},{"location":"concepts/#children","title":"Children","text":"<p>Hierarchy via <code>children[]</code> (e.g., section \u2192 card \u2192 button).</p>"},{"location":"concepts/#affordances-actions","title":"Affordances (actions)","text":"<p>Explicit operations an agent can perform: <pre><code>{\n  \"action\": \"ticket.update\",\n  \"method\": \"PATCH\",\n  \"href\": \"/agent/tickets/{id}\",\n  \"params\": { \"id\": \"t_8129\", \"status\": \"pending\" },\n  \"dry_run_supported\": true\n}\n</code></pre></p>"},{"location":"concepts/#presentation-html-only","title":"Presentation (HTML-only)","text":"<pre><code>\"presentation\": {\n  \"tag\": \"article\",\n  \"variant\": \"card\",\n  \"tokens\": { \"tone\": \"warning\", \"size\": \"md\" },\n  \"classes\": \"rounded border p-4\"\n}\n</code></pre> <p>Never expose <code>presentation</code> to agents. Strip on the wire.</p>"},{"location":"concepts/#events","title":"Events","text":"<p>Meaningful state changes, not layout:</p> <pre><code>{\"type\":\"ticket.updated\",\"id\":\"t_8129\",\"ts\":\"2025-08-10T18:20:11Z\",\"entity\":\"ticket\",\"changes\":{\"status\":[\"open\",\"pending\"]}}\n</code></pre>"},{"location":"concepts/#accessibility-html-mapping","title":"Accessibility &amp; HTML mapping","text":"<p>Renderers map semantics to proper HTML/ARIA (<code>card</code> \u2192 <code>&lt;article role=\"region\"&gt;</code>, <code>button</code> \u2192 <code>&lt;button&gt;</code>, <code>section</code> \u2192 <code>&lt;section&gt;</code>), complying with WCAG (landmarks, focus, labels).</p>"},{"location":"concepts/#internationalization","title":"Internationalization","text":"<p>Allow <code>lang</code> at page/entity and optional dictionaries:</p> <pre><code>\"i18n\": {\n  \"default\": \"en\",\n  \"strings\": {\n    \"en\": { \"title\": \"Buy the ticket\" },\n    \"de\": { \"title\": \"Ticket kaufen\" }\n  }\n}\n</code></pre>"},{"location":"concepts/#type-registry-naming","title":"Type Registry &amp; Naming","text":"<ul> <li>Built-in primitives: <code>section</code>, <code>paragraph</code>, <code>button</code>, <code>card</code>, <code>image</code>.</li> <li>Domain types: free-form (e.g., <code>ticket</code>, <code>product</code>).</li> <li>Naming: lowercase kebab or snake case; use dot-namespace for bundles (e.g., <code>helpdesk.ticket</code>).</li> <li>Stability: once introduced on the wire, treat as public contract; deprecate via <code>ui_hints.deprecated: true</code> before removal.</li> </ul> <p>Images: Use the <code>image</code> node when you need explicit props (src/alt) or future affordances (e.g., open-full). If you only need inline media in copy, a Markdown image inside <code>*_md</code> fields is fine.</p>"},{"location":"concepts/#copy-fields-markdown","title":"Copy Fields &amp; Markdown","text":"<ul> <li>Prefer plain-string fields (e.g., <code>title</code>) with optional <code>*_md</code> variants for lightweight Markdown. Supported subset: <code>**bold**</code>, <code>*italic*</code>, <code>`code`</code>, links <code>[text](url)</code>, lists, <code>##</code>\u2013<code>####</code> headings. Renderers MUST sanitize HTML output. Agents should treat <code>*_md</code> as text, not HTML.</li> </ul>"},{"location":"concepts/#preconditions-language-normalized","title":"Preconditions Language (normalized)","text":"<p>Affordances may include <code>preconditions[]</code>. Each is:</p> <pre><code>{ \"field\": \"props.status\", \"op\": \"equals\", \"value\": \"open\" }\n</code></pre> <p>Supported <code>op</code>: <code>equals</code>, <code>not_equals</code>, <code>in</code>, <code>not_in</code>, <code>gte</code>, <code>lte</code>, <code>exists</code>, <code>absent</code>. Use <code>value</code> for scalar comparisons or <code>values</code> (array) for <code>in/not_in</code>.</p>"},{"location":"concepts/#audience","title":"Audience","text":"<p>Nodes may include an <code>audience</code> property with one of <code>agent | human | both</code> (default <code>both</code>). Semantics: - <code>human</code>: node is intended for human rendering only (e.g., navigational header). - <code>agent</code>: node is only for machine consumption (e.g., hidden hints, machine notes). - <code>both</code>: node remains for both audiences.</p> <p>Inheritance: a parent\u2019s <code>audience</code> applies transitively to children unless a child overrides it.</p>"},{"location":"faq/","title":"FAQ","text":"<p>Is JACE a replacement for APIs? No. It\u2019s a machine-native view layer that complements APIs with workflow context + explicit actions.</p> <p>Can <code>type</code> reuse HTML tag names? You can (e.g., <code>section</code>, <code>button</code>), but keep it semantic. Domain types like <code>ticket</code>, <code>product</code>, <code>card</code> are encouraged.</p> <p>Do agents ever see <code>presentation</code>? Never. Strip it at the server boundary.</p> <p>How do I model multi-step flows? Use separate views per step, explicit affordances, plus events for progress.</p> <p>How do I support i18n/RTL? Allow <code>lang</code> at page/entity; your renderer sets <code>lang</code>/<code>dir</code> and applies translations.</p> <p>Should I send <code>Idempotency-Key</code> for dry runs? Recommended but optional. For commits, it is REQUIRED on POST/PUT/PATCH. Dry-runs never persist state and MUST NOT consume the key.</p> <p>URI Templates vs params? If <code>href</code> contains <code>{name}</code> tokens, clients SHOULD expand them from <code>params</code> and also pass the body/query as usual. Servers MUST accept either approach and resolve duplicates with URI path taking precedence over body.</p> <p>What is <code>ui_hints</code> for? Non-semantic hints for human renderers (tables, forms). Never exposed to agents.</p> <p>Can I hide parts of a view from agents or from humans? Yes. Set <code>audience: \"human\"</code> for human-only nodes, or <code>audience: \"agent\"</code> for agent-only nodes. Leave it out (or use <code>\"both\"</code>) to include nodes for both.</p> <p>Does <code>audience</code> replace authentication/authorization? No. <code>audience</code> is a presentational filter. You must still enforce access control on the server and in action handlers.</p> <p>What happens if a parent is <code>human</code> and a child is <code>agent</code>? The child\u2019s explicit <code>audience</code> overrides the parent for that subtree.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#content-negotiation","title":"Content negotiation","text":"<pre><code>Accept: application/jace+json                  \u2192 JACE for agents\nAccept: application/jace+json;profile=\"\u2026/0.1\" \u2192 JACE with explicit profile\nAccept: text/html                             \u2192 HTML for humans\nVary: Accept\n</code></pre> <p>Optional: <code>?format=jace</code> and:</p> <pre><code>&lt;link rel=\"alternate\" type=\"application/jace+json\" href=\"/page?format=jace\" /&gt;\n</code></pre>"},{"location":"getting-started/#core-structure-reserved-keys","title":"Core structure (reserved keys)","text":"<p><code>version</code>, <code>$schema</code>, <code>page</code>, <code>entities</code>, <code>type</code>, <code>id</code>, <code>props</code>, <code>affordances</code>, <code>children</code>, <code>links</code>, <code>summary</code>, <code>pagination</code>, <code>ui_hints</code>,  <code>presentation</code> (HTML-only; never for agents)  and <code>audience</code> (<code>agent | human | both</code>, default <code>both</code>).</p>"},{"location":"getting-started/#reserved-keys-formal-definitions","title":"Reserved Keys \u2014 Formal Definitions","text":"<ul> <li><code>links[]</code>: array of link objects <code>{ rel, href, title?, method?, type? }</code>. <code>rel</code> SHOULD be from the IANA Link Relations registry; vendor-specific relations MAY use <code>x-&lt;name&gt;</code>.</li> <li><code>summary</code>: either a short string or an object with domain counters, e.g., <code>{ count: 25, open: 6 }</code>.</li> <li><code>pagination</code> (response): <code>{ \"cursor\": \"abc\"?, \"next_cursor\"?: \"xyz\", \"prev_cursor\"?: \"pqr\", \"limit\": 50, \"order_by\": \"props.created_at\", \"order_dir\": \"asc\" }</code>.</li> <li><code>ui_hints</code>: non-semantic renderer hints (see examples below).</li> </ul>"},{"location":"getting-started/#pagination-request-response-contract","title":"Pagination \u2014 Request &amp; Response Contract","text":"<p>Request (query)</p> <pre><code>?cursor=&lt;opaque&gt;&amp;limit=50&amp;order_by=props.created_at&amp;order_dir=desc\n</code></pre> <ul> <li><code>limit</code> default 50, min 1, max 200.</li> <li><code>order_by</code> is a dot-path within entity (e.g., <code>props.priority</code>).</li> <li><code>order_dir</code> in <code>{asc,desc}</code>.</li> </ul> <p>Response (body)</p> <pre><code>{\n  \"pagination\": {\n    \"cursor\": \"c0\",   \n    \"next_cursor\": \"c1\",\n    \"prev_cursor\": null,\n    \"limit\": 50,\n    \"order_by\": \"props.created_at\",\n    \"order_dir\": \"desc\"\n  }\n}\n</code></pre> <p>Servers MUST return stable ordering with a tie-break (e.g., <code>id</code>) to avoid duplicates/skips across pages. Cursors MUST be opaque and SHOULD remain valid for at least 24 hours.</p>"},{"location":"getting-started/#error-envelope-wire-contract","title":"Error Envelope \u2014 Wire Contract","text":"<p>For non-2xx, return an error envelope with HTTP status aligned to <code>code</code>:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"INVALID_PARAMS\",\n    \"message\": \"status must be one of: open,pending,closed\",\n    \"hints\": [\"Use 'pending' to triage\"],\n    \"details\": { \"field\": \"params.status\" }\n  }\n}\n</code></pre> <p>Canonical codes \u2192 HTTP: see specs/errors.md. Servers MUST map <code>error.code</code> to HTTP as specified.</p>"},{"location":"getting-started/#actions-dry-run-idempotency","title":"Actions \u2014 Dry Run &amp; Idempotency","text":"<ul> <li>Dry run: <code>dry_run: true</code> in body OR <code>env.dry_run</code> in runtime. MUST NOT persist. SHOULD return <code>audit_preview</code>.</li> <li>Commit: omit <code>dry_run</code> or set <code>false</code>. MUST require <code>Idempotency-Key</code> on server.</li> <li>Idempotency window: recommended 24h; duplicate keys MUST return the original committed response body (same status), not re-execute.</li> </ul>"},{"location":"getting-started/#ui-hints-human-only","title":"UI Hints (human-only)","text":"<pre><code>\"ui_hints\": {\n  \"layout\": { \"variant\": \"list\" },\n  \"table\": { \"columns\": [\"title\", \"status\", \"assignee\"] },\n  \"form\": { \"layout\": \"vertical\" },\n  \"deprecated\": false\n}\n</code></pre>"},{"location":"getting-started/#accept-vs-audience","title":"Accept vs audience","text":"<p>On endpoints that support both (e.g., runtime <code>/view</code>): apply precedence defined in README (query &gt; audience &gt; Accept &gt; default). <code>audience</code> is a delivery-time visibility filter over the JACE tree. It MUST NOT be used as an authorization mechanism.</p>"},{"location":"getting-started/#discovery","title":"Discovery","text":"<pre><code>GET /.well-known/agent-manifest\n</code></pre> <pre><code>{\n  \"version\": \"0.1.0\",\n  \"protocols\": [\"JACE/0.1\"],\n  \"dashboard\": { \"name\": \"Demo\", \"base_url\": \"https://example.com\" },\n  \"views\": [{ \"name\": \"tickets.inbox\", \"href\": \"/agent/views/tickets/inbox\" }],\n  \"actions\": [{ \"name\": \"ticket.update\", \"method\": \"PATCH\", \"href\": \"/agent/tickets/{id}\" }],\n  \"events\": { \"sse\": \"/agent/events\", \"types\": [\"ticket.created\", \"ticket.updated\"] },\n  \"schemas\": {\n    \"jace-view\": \"/schemas/jace-view.schema.json\",\n    \"jace-view-agent\": \"/schemas/jace-view.agent.schema.json\",\n    \"jace-action\": \"/schemas/jace-action.schema.json\",\n    \"jace-action-result\": \"/schemas/jace-action-result.schema.json\",\n    \"jace-event\": \"/schemas/jace-event.schema.json\"\n  }\n}\n</code></pre>"},{"location":"getting-started/#serve-jace-html-express-pseudo","title":"Serve JACE &amp; HTML (express pseudo)","text":"<pre><code>app.get(\"/agent/views/tickets/inbox\", (req, res) =&gt; {\n  const jace = loadFromDb(); // internal JACE (may include presentation)\n  res.setHeader(\"Vary\", \"Accept\");\n  if ((req.headers.accept || \"\").includes(\"application/jace+json\") || req.query.format === \"jace\") {\n    return res.type(\"application/jace+json\").json(toAgentPayload(jace)); // strip presentation\n  }\n  return res.type(\"html\").send(renderHtml(jace)); // map semantics to ARIA/HTML\n});\n</code></pre>"},{"location":"getting-started/#audience-filtering","title":"Audience filtering","text":"<p>Servers should filter views per audience before sending:</p> <p><pre><code>function toAudiencePayload(node, target /* 'agent' | 'human' */) {\n  const aud = node.audience ?? 'both';\n  if (aud !== 'both' &amp;&amp; aud !== target) return null;\n\n  // For agents, also strip presentation\n  const omit = target === 'agent' ? ['presentation'] : [];\n  const out = deepOmit(node, omit);\n\n  if (Array.isArray(node.children)) {\n    out.children = node.children\n      .map(ch =&gt; toAudiencePayload(ch, target))\n      .filter(Boolean);\n  }\n  return out;\n}\n</code></pre> Use it with content negotiation precedence (query <code>?format=</code> / <code>audience=</code> &gt; <code>Accept:</code>).</p>"},{"location":"overview/","title":"JSON Agent Context Envelope (JACE): Machine-First Pages, Human-Friendly Rendering","text":"<p>Quick links: \u2022 Getting Started \u2022 Core Concepts \u2022 Runtime/Sandbox \u2022 Security \u2022 Roadmap</p>"},{"location":"overview/#introduction","title":"Introduction","text":"<p>Most web UIs are built for people, not agents. Real pages mix content with layout wrappers, utility classes, hydration scaffolding, analytics, and other noise. Agents end up scraping the DOM, guessing parameters, and breaking when a class name changes.</p> <p>JSON Agent Context Envelope (JACE) flips that model. JACE is a machine-first, JSON representation of a page\u2019s entities, state, and affordances (actions). From a single source of truth you:</p> <ul> <li>Return JACE JSON to agents for precise, schema-checked interaction.</li> <li>Render accessible HTML for humans.</li> <li>Keep visual details in a <code>presentation</code> property used only for HTML rendering (never sent to agents).</li> </ul> <p>Think: semantic JSON for meaning \u2192 HTML for humans.</p>"},{"location":"overview/#why-machine-first","title":"Why machine-first?","text":"<ul> <li>No guessing: Actions are explicit (<code>action</code>, <code>method</code>, <code>href</code>, <code>params</code>) instead of hidden behind forms or JS handlers.</li> <li>Stable contract: JSON Schemas, semantic versioning, deterministic pagination, and predictable error models.</li> <li>UI decoupled: Redesign HTML freely; the JACE contract remains intact.</li> <li>Safer automation: <code>dry_run</code>, audit previews, policy hints, and capability scopes are first-class.</li> </ul>"},{"location":"overview/#how-to-use-jace","title":"How to use JACE","text":""},{"location":"overview/#content-negotiation","title":"Content negotiation","text":"<p>Serve JACE and HTML from the same URL:</p> <pre><code>Accept: application/jace+json  \u2192 JACE for agents\nAccept: text/html             \u2192 HTML for humans\n</code></pre> <ul> <li>Send <code>Vary: Accept</code> so caches handle both.</li> <li>Optionally link JACE from your HTML:</li> </ul> <pre><code>&lt;link rel=\"alternate\" type=\"application/jace+json\" href=\"/page?format=jace\"&gt;\n</code></pre>"},{"location":"overview/#core-structure-reserved-keys","title":"Core structure (reserved keys)","text":"<p><code>version</code>, <code>$schema</code>, <code>page</code>, <code>entities</code>, <code>type</code>, <code>id</code>, <code>props</code>, <code>affordances</code>, <code>children</code>, <code>links</code>, <code>summary</code>, <code>pagination</code>, <code>ui_hints</code>, <code>presentation</code> (HTML-only), and <code>audience</code> (<code>agent | human | both</code>, default <code>both</code>).</p>"},{"location":"overview/#audience-aware-responses","title":"Audience-aware responses","text":"<p>Mark nodes that are only useful for humans (e.g., headers, decorative sections) with <code>audience: \"human\"</code>. Mark machine-only helper blocks with <code>audience: \"agent\"</code>. Renderers and servers should apply audience filtering before delivery, and must never rely on it for access control.</p>"},{"location":"overview/#jace-html-practical-patterns","title":"JACE \u2192 HTML: practical patterns","text":""},{"location":"overview/#1-sections-vs-entities","title":"1) Sections vs. entities","text":"<p>Use <code>type: \"section\"</code> to group child entities without leaking layout semantics.</p> <p>JACE <pre><code>{\n  \"$schema\": \"https://example.com/schemas/jace-view.schema.json\",\n  \"version\": \"0.1.0\",\n  \"type\": \"section\",\n  \"id\": \"overview\",\n  \"children\": [\n    { \"type\": \"paragraph\", \"id\": \"hero_copy\", \"props\": { \"title_md\": \"## Hi there\" } },\n    {\n      \"type\": \"button\",\n      \"id\": \"cta_btn\",\n      \"props\": { \"label\": \"Contact me\" },\n      \"affordances\": [\n        { \"action\": \"contact.open\", \"method\": \"GET\", \"href\": \"#contact\", \"params\": {} }\n      ]\n    }\n  ],\n  \"presentation\": { \"tag\": \"section\", \"classes\": \"container mx-auto py-12\" }\n}\n</code></pre></p> <p>Rendered HTML <pre><code>&lt;section id=\"overview\" class=\"container mx-auto py-12\"&gt;\n  &lt;!-- children render here --&gt;\n&lt;/section&gt;\n</code></pre></p> <p>Rule: <code>type</code> is semantic (<code>section</code>, <code>ticket</code>, <code>product</code>, \u2026), not a visual HTML tag. If you need tag hints, put them in <code>presentation</code>.</p>"},{"location":"overview/#2-buttons-explicit-actions","title":"2) Buttons = explicit actions","text":"<p>Buttons declare actions in <code>affordances</code>. Render as form (no-JS fallback) or JS handler (nicer UX).</p> <p>JACE <pre><code>{\n  \"type\": \"button\",\n  \"id\": \"buy_ticket_btn\",\n  \"props\": { \"label\": \"Buy ticket\" },\n  \"affordances\": [\n    {\n      \"action\": \"ticket.buy\",\n      \"method\": \"POST\",\n      \"href\": \"/agent/tickets\",\n      \"params\": { \"title\": \"buy ticket\" },\n      \"dry_run_supported\": true,\n      \"requires\": [\"auth\"],\n      \"scopes\": [\"tickets:write\"]\n    }\n  ],\n  \"presentation\": { \"tag\": \"button\", \"classes\": \"btn btn-primary\" }\n}\n</code></pre></p> <p>HTML (no-JS) <pre><code>&lt;form id=\"buy_ticket_btn\" action=\"/agent/tickets\" method=\"POST\"&gt;\n  &lt;input type=\"hidden\" name=\"title\" value=\"buy ticket\" /&gt;\n  &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Buy ticket&lt;/button&gt;\n&lt;/form&gt;\n</code></pre></p> <p>HTML (JS) <pre><code>&lt;button id=\"buy_ticket_btn\" class=\"btn btn-primary\"&gt;Buy ticket&lt;/button&gt;\n&lt;script&gt;\n  document.getElementById('buy_ticket_btn').addEventListener('click', async () =&gt; {\n    await fetch('/agent/tickets', {\n      method: 'POST',\n      headers: {'Content-Type':'application/json','Idempotency-Key': crypto.randomUUID()},\n      body: JSON.stringify({ title: 'buy ticket' })\n    });\n  });\n&lt;/script&gt;\n</code></pre></p>"},{"location":"overview/#3-paragraphs-with-light-markdown","title":"3) Paragraphs with light Markdown","text":"<p>Store rich copy in <code>props</code>; the renderer decides how much Markdown to support.</p> <p>JACE <pre><code>{\n  \"type\": \"paragraph\",\n  \"id\": \"issue_summary\",\n  \"props\": {\n    \"title_md\": \"## Checkout failing\",\n    \"content_md\": [\n      \"**Lorem ipsum** dolor sit amet, *consectetur* adipiscing elit...\",\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit...\"\n    ]\n  },\n  \"presentation\": { \"tag\": \"div\", \"classes\": \"prose max-w-none\" }\n}\n</code></pre></p> <p>HTML (example) <pre><code>&lt;div id=\"issue_summary\" class=\"prose max-w-none\"&gt;\n  &lt;span name=\"title\"&gt;&lt;strong&gt;Checkout failing&lt;/strong&gt;&lt;/span&gt;\n  &lt;p name=\"content_0\"&gt;&lt;b&gt;Lorem ipsum&lt;/b&gt; dolor sit amet, &lt;i&gt;consectetur&lt;/i&gt; adipiscing elit...&lt;/p&gt;\n  &lt;p name=\"content_1\"&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit...&lt;/p&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"overview/#4-cards-that-can-act","title":"4) Cards that can act","text":"<p>Bundle data and actions; render as a card for humans; expose explicit affordances for agents.</p> <p>JACE <pre><code>{\n  \"type\": \"card\",\n  \"id\": \"ticket_card_t_8129\",\n  \"props\": {\n    \"title\": \"Buy the ticket\",\n    \"description\": \"Why you might want a new ticket\",\n    \"status\": \"open\",\n    \"priority\": 1,\n    \"assignee\": \"me\"\n  },\n  \"affordances\": [\n    {\n      \"action\": \"ticket.buy\",\n      \"method\": \"POST\",\n      \"href\": \"/agent/tickets\",\n      \"params\": { \"id\": \"t_8129\", \"title\": \"buy ticket\" },\n      \"dry_run_supported\": true,\n      \"preconditions\": [{ \"field\": \"props.status\", \"op\": \"equals\", \"value\": \"open\" }]\n    }\n  ],\n  \"presentation\": {\n    \"tag\": \"article\",\n    \"variant\": \"card\",\n    \"tokens\": { \"tone\": \"neutral\", \"size\": \"md\", \"icon\": \"ticket\" },\n    \"classes\": \"rounded-xl border p-4 shadow-sm\"\n  }\n}\n</code></pre></p> <p>HTML <pre><code>&lt;article id=\"ticket_card_t_8129\" class=\"rounded-xl border p-4 shadow-sm\"&gt;\n  &lt;h1 name=\"title\"&gt;Buy the ticket&lt;/h1&gt;\n  &lt;p name=\"description\"&gt;Why you might want a new ticket&lt;/p&gt;\n  &lt;span name=\"priority\"&gt;1&lt;/span&gt;\n  &lt;form id=\"act_t_8129\" action=\"/agent/tickets\" method=\"POST\"&gt;\n    &lt;input type=\"hidden\" name=\"id\" value=\"t_8129\" /&gt;\n    &lt;input type=\"hidden\" name=\"title\" value=\"buy ticket\" /&gt;\n    &lt;button type=\"submit\"&gt;buy ticket&lt;/button&gt;\n  &lt;/form&gt;\n&lt;/article&gt;\n</code></pre></p>"},{"location":"overview/#5-human-only-header","title":"5) Human-only header","text":"<pre><code>{ \"type\": \"section\", \"id\": \"header\", \"audience\": \"human\", \"props\": { \"title\": \"Site\" }, \"presentation\": { \"tag\": \"header\" } }\n</code></pre>"},{"location":"overview/#presentation-field-html-only","title":"Presentation field (HTML-only)","text":"<p>Policy: <code>presentation</code> exists only to help the HTML renderer choose tags, variants, classes, and design tokens. Never expose <code>presentation</code> to agents. It is non-semantic, unstable, and irrelevant to machine behavior.</p> <ul> <li>Server rule: Strip <code>presentation</code> (and any <code>classes</code>/<code>style</code>) from all JACE responses when <code>Accept: application/jace+json</code> (or <code>audience=agent</code>).</li> <li>Schema rule (wire): the agent wire schema forbids <code>presentation</code>.</li> <li>Internal/build schema: may allow <code>presentation</code> for renderers.</li> </ul> <p>Internal JACE (with presentation) <pre><code>{\n  \"type\": \"card\",\n  \"id\": \"ticket_card_t_8129\",\n  \"props\": { \"title\": \"Buy the ticket\", \"priority\": 1 },\n  \"affordances\": [\n    { \"action\": \"ticket.buy\", \"method\": \"POST\", \"href\": \"/agent/tickets\", \"params\": { \"id\": \"t_8129\" } }\n  ],\n  \"presentation\": {\n    \"tag\": \"article\",\n    \"variant\": \"card\",\n    \"tokens\": { \"tone\": \"neutral\", \"size\": \"md\" },\n    \"classes\": \"rounded-xl border p-4 shadow-sm\"\n  }\n}\n</code></pre></p> <p>What the agent receives (presentation stripped) <pre><code>{\n  \"type\": \"card\",\n  \"id\": \"ticket_card_t_8129\",\n  \"props\": { \"title\": \"Buy the ticket\", \"priority\": 1 },\n  \"affordances\": [\n    { \"action\": \"ticket.buy\", \"method\": \"POST\", \"href\": \"/agent/tickets\", \"params\": { \"id\": \"t_8129\" } }\n  ]\n}\n</code></pre></p> <p>Implementation hint (pseudo): <pre><code>function toAgentPayload(jace) {\n  return deepOmit(jace, ['presentation', 'classes', 'style']);\n}\n</code></pre></p>"},{"location":"overview/#manifest-discovery","title":"Manifest &amp; discovery","text":"<p>Expose a tiny manifest so agents can discover views, actions, and events.</p> <p>Endpoint: <code>GET /.well-known/agent-manifest</code> <pre><code>{\n  \"version\": \"0.1.0\",\n  \"protocols\": [\"JACE/0.1\"],\n  \"dashboard\": { \"name\": \"Your Site\", \"base_url\": \"https://example.com\" },\n  \"views\": [{ \"name\": \"home\", \"href\": \"/agent/views/home\" }],\n  \"actions\": [{\n    \"name\": \"ticket.buy\",\n    \"method\": \"POST\",\n    \"href\": \"/agent/tickets\",\n    \"params_schema_ref\": \"https://example.com/schemas/ticket-buy.json\",\n    \"returns_schema_ref\": \"https://example.com/schemas/ticket.schema.json\"\n  }],\n  \"events\": { \"sse\": \"/agent/events\", \"types\": [\"ticket.created\",\"ticket.updated\"] },\n  \"schemas\": {\n    \"jace-view\": \"https://example.com/schemas/jace-view.schema.json\"\n  }\n}\n</code></pre></p> <p>HTML can advertise it: <pre><code>&lt;link rel=\"agent-manifest\" href=\"/.well-known/agent-manifest\"&gt;\n&lt;link rel=\"alternate\" type=\"application/jace+json\" href=\"/?format=jace\"&gt;\n</code></pre></p>"},{"location":"overview/#wire-level-rules","title":"Wire-level rules","text":"<ul> <li>Caching: <code>ETag</code>/<code>Last-Modified</code> on views.</li> <li>Pagination: cursor-based (<code>pagination.next_cursor</code>) plus explicit <code>order_by</code>/<code>order_dir</code>.</li> <li>Idempotency: support <code>Idempotency-Key</code> header for POST/PUT/PATCH.</li> <li>Errors: standard envelope with codes + hints:</li> </ul> <pre><code>{\n  \"error\": {\n    \"code\": \"POLICY_DENIED\",\n    \"message\": \"Priority 5 requires role: manager\",\n    \"hints\": [\"Request lower priority\", \"Use manager credential\"]\n  }\n}\n</code></pre>"},{"location":"overview/#actions-safer-by-default","title":"Actions: safer by default","text":"<p>Every write action should support <code>dry_run</code> and return an <code>audit_preview</code>.</p> <p>Request <pre><code>POST /agent/tickets\nContent-Type: application/json\nIdempotency-Key: 1b6f1b9d-...\n{\n  \"action\": \"ticket.buy\",\n  \"params\": { \"id\": \"t_8129\", \"title\": \"buy ticket\" },\n  \"dry_run\": true,\n  \"intent\": \"Buy a ticket for the user\"\n}\n</code></pre></p> <p>Response <pre><code>{\n  \"ok\": true,\n  \"dry_run\": true,\n  \"result\": { \"id\": \"t_9001\", \"status\": \"open\" },\n  \"audit_preview\": \"CREATE ticket id=t_9001 title='buy ticket'\"\n}\n</code></pre></p>"},{"location":"overview/#events-ndjson-sse","title":"Events (NDJSON / SSE)","text":"<p>Push only meaningful state changes\u2014no analytics or hydration noise.</p> <pre><code>{\"type\":\"ticket.updated\",\"id\":\"t_8129\",\"ts\":\"2025-08-10T18:20:11Z\",\"entity\":\"ticket\",\"changes\":{\"status\":[\"open\",\"pending\"]},\"recommended_affordances\":[{\"action\":\"ticket.assign\",\"method\":\"PATCH\",\"href\":\"/agent/tickets/{id}\",\"params\":{\"id\":\"t_8129\",\"assignee\":\"me\"}}]}\n</code></pre>"},{"location":"overview/#accessibility-html-mapping","title":"Accessibility &amp; HTML mapping","text":"<p>Your HTML renderer must map JACE semantics to proper HTML/ARIA (e.g., <code>card</code> \u2192 <code>&lt;article role=\"region\"&gt;</code>, <code>button</code> \u2192 <code>&lt;button&gt;</code>, <code>section</code> \u2192 <code>&lt;section&gt;</code>), with keyboard focus, labels, and landmarks. JACE keeps the meaning; renderers ensure WCAG-compliant delivery.</p>"},{"location":"overview/#internationalization","title":"Internationalization","text":"<p>Support <code>lang</code> at page/entity level and optional <code>i18n</code> dictionaries: <pre><code>\"i18n\": {\n  \"default\": \"en\",\n  \"strings\": {\n    \"en\": { \"title\": \"Buy the ticket\" },\n    \"de\": { \"title\": \"Ticket kaufen\" }\n  }\n}\n</code></pre></p>"},{"location":"overview/#security-stability","title":"Security &amp; stability","text":"<ul> <li>Never allow JS in JACE (including <code>presentation</code>).</li> <li>Strip <code>presentation</code> for agent responses.</li> <li>Validate all JACE documents and action payloads with JSON Schema.</li> <li>Scope credentials with capabilities; enforce rate limits and approval flows for risky actions.</li> </ul>"},{"location":"overview/#the-future","title":"The future","text":"<ul> <li>Agent-ready web: JACE becomes the machine-native layer so agents stop scraping human DOMs.</li> <li>Framework support: JSX/templating compilers target a JACE IR \u2192 HTML for humans, JACE for agents.</li> <li>Agent SEO: JACE acts like JSON-LD with actions\u2014searchable, indexable, and automatable.</li> <li>Safer autonomy: dry-run, audit, and policy gates are part of the contract, not bolt-ons.</li> </ul>"},{"location":"overview/#semantic-htmlaria-mapping-reference","title":"Semantic \u2192 HTML/ARIA Mapping (reference)","text":"JACE type HTML ARIA/Notes <code>section</code> <code>&lt;section&gt;</code> consider <code>aria-labelledby</code> when titled <code>card</code> <code>&lt;article&gt;</code> <code>role=\"region\"</code>, focusable header <code>button</code> <code>&lt;button&gt;</code> keyboard activation, <code>aria-pressed</code> if toggle <code>paragraph</code> <code>&lt;p&gt;</code> or <code>&lt;div&gt;</code> preserve reading order <p>Renderers MUST meet WCAG 2.2 AA for focus order, color contrast, and landmark usage.</p>"},{"location":"overview/#i18n-directionality","title":"i18n &amp; Directionality","text":"<ul> <li><code>lang</code> may be set at page/entity. Missing strings fall back in this order: entity.lang \u2192 page.lang \u2192 i18n.default \u2192 <code>en</code>.</li> <li>Direction (<code>dir</code>) inferred from <code>lang</code> (<code>ar</code>, <code>fa</code>, <code>he</code>, <code>ur</code> \u2192 RTL) or explicitly overridden in renderer config.</li> <li>Translators operate on <code>i18n.strings[&lt;lang&gt;]</code> maps; unknown keys are ignored.</li> </ul>"},{"location":"overview/#conclusion","title":"Conclusion","text":"<p>JACE cleanly separates meaning from presentation. Define pages in semantic JSON with explicit affordances; render accessible HTML for people; return clean, schema-validated JACE for agents. The result is a web that humans love to use and agents can reliably operate\u2014no scraping, no guesswork, just intent and action.</p>"},{"location":"real-world/","title":"Real-World Usage","text":""},{"location":"real-world/#agents-llms-bots-rpa","title":"Agents (LLMs, bots, RPA)","text":"<p>1) Fetch a view with <code>Accept: application/jace+json</code>. 2) Read entities to understand context. 3) Execute affordances with <code>dry_run</code> first, inspect <code>audit_preview</code>, then commit.</p>"},{"location":"real-world/#browsers-humans","title":"Browsers (humans)","text":"<ul> <li>Render JACE \u2192 HTML (map semantics to proper tags/ARIA).</li> <li>Use forms as no-JS fallback; fetch/JS for UX.</li> <li>Apply visuals from <code>presentation</code> only.</li> </ul>"},{"location":"real-world/#patterns","title":"Patterns","text":"<ul> <li>Support inbox: tickets as <code>card</code>, actions: assign, status update, reply.  </li> <li>E-commerce: products as entities; price/stock actions.  </li> <li>Admin panels: replace Selenium scraping with JACE views.  </li> <li>Knowledge/news: articles as entities; summarize/tag/archive actions.</li> <li>Human-only navigation: site headers/menus with <code>audience: \"human\"</code> so agents don\u2019t parse decorative layout.</li> <li>Agent-only hints: machine guidance blocks (e.g., suggested actions, pagination cursors) with <code>audience: \"agent\"</code>.</li> </ul>"},{"location":"real-world/#migration-playbooks","title":"Migration playbooks","text":"<ul> <li>HTML-only \u2192 JACE: keep your UI; add JACE view endpoints + HTML renderer that reads the same JACE.  </li> <li>API-first \u2192 JACE: package workflow-oriented views around your API; agents get context + actions.  </li> <li>Iterative: start with your busiest view and 2\u20133 high-value affordances.</li> </ul>"},{"location":"real-world/#pagination-flow-agent","title":"Pagination Flow (agent)","text":"<ol> <li>GET inbox: <code>?limit=50&amp;order_by=props.created_at&amp;order_dir=desc</code></li> <li>If <code>pagination.next_cursor</code>, repeat with <code>?cursor=&lt;next_cursor&gt;</code>.</li> <li>Agents SHOULD store the last <code>cursor</code> per view to resume later.</li> </ol>"},{"location":"real-world/#events-flow-sse","title":"Events Flow (SSE)","text":"<ul> <li>Connect: <code>GET /agent/events</code> with <code>Accept: text/event-stream</code>.</li> <li>Reconnect with <code>Last-Event-ID</code> to resume from the last <code>event.id</code>.</li> <li>Only domain events (created/updated/deleted), no analytics.</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>0.1 (today) - Spec + schemas (view/action/result/event) - Reference server (content negotiation, CORS) - HTML renderer (ARIA-lite), client libs (TS/Python) - Static Playground (JACE Runtime) to load &amp; render JACE</p> <p>0.2 - Interactive Sandbox: <code>dry_run</code>\u2192<code>commit</code>, policy prompts - Agent-wire schema forbids <code>presentation</code> - CLI: <code>jace serve</code> for static views + renderer - Better Markdown + i18n helpers - Canonical Error codes and Pagination spec - ARIA mapping reference table - Audience filtering (<code>audience: agent|human|both</code>) finalized in spec and reference implementations.</p> <p>0.3 - Framework adapters (Next/Remix/Nuxt/SvelteKit) - Event filters &amp; reconnection - Access control examples (scopes/approvals) - LangGraph/CrewAI integrations (auto tools from affordances)</p> <p>0.4 - Validation middleware (Ajv/Zod) with friendly errors - Advanced layouts (tables/forms) without leaking presentation - End-to-end demo: goal \u2192 affordance selection \u2192 dry-run \u2192 approval \u2192 commit</p> <p>1.0 - Stability guarantees, compatibility suite - Reference implementations - Security guide &amp; checklists</p> <p>Future - Agent SEO (discoverable JACE + actions) - JSX/templating \u2192 JACE IR compilers - Safer autonomy defaults (policy gates baked-in)</p>"},{"location":"runtime-sandbox/","title":"Runtime / Sandbox","text":""},{"location":"runtime-sandbox/#jace-sandbox-runtime-quickjs","title":"JACE Sandbox Runtime (QuickJS)","text":"<p>Purpose: Run Agent Apps and Agent-First Dashboards safely, deterministically, and with explicit affordances (actions). Agents fetch an JACE view, then execute actions (<code>/press</code> or <code>/actions</code>) with <code>dry_run \u2192 commit</code>, audit trails, and optional sessions.</p>"},{"location":"runtime-sandbox/#1-architecture","title":"1) Architecture","text":"<ul> <li>QuickJS VM runs an unbundled JS \u201cmodule\u201d that sets:</li> </ul> <p><pre><code>globalThis.jace = {\n  manifest: { name, version },\n  init(env)  -&gt; state,\n  view(state)-&gt; jaceView,\n  actions: { [actionName]: (state, params, env) -&gt; ActionResult }\n}\n</code></pre> * Deterministic runtime: patched <code>Date.now()</code> &amp; <code>new Date()</code>, seeded <code>Math.random</code>, no timers, no network. * HTTP wrapper exposes JSON endpoints so any agent or client can interact.</p>"},{"location":"runtime-sandbox/#2-module-abi","title":"2) Module ABI","text":"<pre><code>type ActionEnv = {\n  session_id?: string;   // for multi-tenant state\n  dry_run?: boolean;     // preview-only\n  intent?: string;       // human-readable reason\n  now?: string;          // optional override (ISO)\n  [capability: string]: unknown; // host-injected caps (future)\n};\n\ntype ActionResult = {\n  state: any;                  // next state (runtime persists unless dry_run)\n  result?: any;                // domain-level result payload\n  audit_preview?: string;      // e.g., \"PUSH 7\", \"ADD 2+3 -&gt; 5\"\n  events?: any[];              // domain events (optional)\n  error?: { code: string; message?: string };\n};\n\nglobalThis.jace = {\n  manifest: { name: string, version: string },\n\n  init(env: ActionEnv): any,            // return initial state (plain object)\n  view(state: any): jaceView,            // render JACE JSON (may include presentation)\n  actions: {\n    [action: string]: (state: any, params: any, env: ActionEnv) =&gt; ActionResult\n  }\n};\n</code></pre> <p>Guidelines</p> <ul> <li>Pure-ish actions: avoid hidden IO; let the host inject capabilities explicitly later.</li> <li>Always set <code>audit_preview</code>; it\u2019s how humans/agents verify intent.</li> <li>Be deterministic; rely on provided <code>env.now</code> or the runtime\u2019s fixed clock.</li> </ul>"},{"location":"runtime-sandbox/#3-http-api","title":"3) HTTP API","text":"<p>All requests/responses are JSON.</p> Method Path Body Returns GET <code>/healthz</code> \u2014 <code>{ ok: true }</code> POST <code>/load</code> <code>{ source: string, env? }</code> <code>{ ok: true }</code> POST <code>/load-file</code> <code>{ path: string, env? }</code> <code>{ ok: true }</code> POST <code>/init</code> <code>{ env? }</code> <code>{ state }</code> POST <code>/view</code> <code>{ state? , audience?: \"agent\" \\| \"human\" }</code> <code>&lt;html&gt;</code> | <code>{ jace }</code> POST <code>/press</code> <code>{ action, params?, env? }</code> <code>{ state, jace, result?, audit_preview?, events?, error? }</code> POST <code>/actions</code> <code>{ action, params?, dry_run?, intent?, session_id? }</code> JACE Action Result <p>Notes</p> <ul> <li><code>/press</code> is your minimal shape. <code>/actions</code> accepts the jace envelope (recommended for agents).</li> <li>If <code>env.dry_run === true</code> or <code>dry_run: true</code>, the runtime does not persist the returned state.</li> <li>If <code>audience: \"agent\"</code> on <code>/view</code>, the runtime should strip <code>presentation</code> fields.</li> <li>When <code>audience: \"agent\"</code>, the runtime strips <code>presentation</code> and filters out nodes with <code>audience: \"human\"</code>.</li> <li>When <code>audience: \"human\"</code>, it may ignore agent-only nodes and keep <code>presentation</code>.</li> <li>If <code>audience</code> is omitted, the runtime chooses representation by <code>Accept</code> (<code>application/jace+json</code> \u2192 JACE JSON, <code>text/html</code> \u2192 HTML).</li> </ul>"},{"location":"runtime-sandbox/#endpoint-consistency","title":"Endpoint Consistency","text":"<ul> <li>Prefer <code>/agent/events</code> for SSE in all examples.</li> <li><code>/actions</code> accepts the JACE envelope; <code>/press</code> remains minimal for demos.</li> </ul>"},{"location":"runtime-sandbox/#4-determinism-safety","title":"4) Determinism &amp; Safety","text":"<ul> <li>Clock: <code>Date.now()</code> and zero-arg <code>new Date()</code> return a fixed timestamp; override with <code>env.now</code> if needed.</li> <li>RNG: <code>Math.random()</code> is seeded (xorshift).</li> <li>No network/threads/timers inside VM.</li> <li>Optional fuel/timeout: use QuickJS interrupt handler to cap long-running actions.</li> <li>Marshalling: host\u2194VM via JSON only (no references).</li> </ul>"},{"location":"runtime-sandbox/#timeouts-fuel","title":"Timeouts &amp; Fuel","text":"<ul> <li>Default max action wall-time: 2s; on breach, return <code>{ error: { code: \"INTERNAL\", message: \"Action timed out\" } }</code>.</li> <li>Optional instruction-count (fuel) guard; on breach, set message <code>\"Fuel exhausted\"</code>.</li> </ul>"},{"location":"runtime-sandbox/#5-sessions-multi-tenant","title":"5) Sessions (multi-tenant)","text":"<p>Use <code>session_id</code> to isolate state per agent or conversation:</p> <ol> <li>Client chooses/creates a <code>session_id</code>.</li> <li> <p>On <code>/view</code> &amp; <code>/press</code>:</p> </li> <li> <p>Host looks up <code>STATE[session_id]</code>.</p> </li> <li>Before running, assign it to <code>jace.___state</code>.</li> <li>After action: if not <code>dry_run</code>, persist the new state back to <code>STATE[session_id]</code>.</li> <li>Return <code>{ state, jace }</code> as usual.</li> </ol> <p>This makes the runtime safe for many concurrent agent users.</p> <p>Idempotency: For commits, the host MUST enforce <code>Idempotency-Key</code> de-duplication per <code>session_id</code>. Dry-run MUST NOT persist state nor consume idempotency keys.</p>"},{"location":"runtime-sandbox/#6-action-semantics","title":"6) Action semantics","text":"<ul> <li>Dry-run first: preview audit &amp; result; do not persist.</li> <li>Commit: repeat without <code>dry_run</code> to persist.</li> <li>Idempotency: accept <code>Idempotency-Key</code> on non-dry-run; de-dupe duplicates.</li> <li>Errors: return <code>{ error: { code, message }, audit_preview }</code> with 4xx/5xx status.</li> </ul>"},{"location":"runtime-sandbox/#7-calculator-example","title":"7) Calculator example","text":"<p>Load &amp; run <pre><code># Start with embedded demo\nnpx ts-node src/jace-sandbox-runtime.ts\n\n# Or start with the external module\nnpx ts-node src/jace-sandbox-runtime.ts src/calc-module.js\n</code></pre></p> <p>Press flow (stack-like) <pre><code>curl -s -X POST http://127.0.0.1:3323/press   -H 'content-type: application/json'   -d '{\"action\":\"calc.input\",\"params\":{\"digit\":7}}' | jq\n\ncurl -s -X POST http://127.0.0.1:3323/press   -H 'content-type: application/json'   -d '{\"action\":\"calc.op\",\"params\":{\"op\":\"divide\"}}' | jq\n\ncurl -s -X POST http://127.0.0.1:3323/press   -H 'content-type: application/json'   -d '{\"action\":\"calc.input\",\"params\":{\"digit\":2}}' | jq\n\ncurl -s -X POST http://127.0.0.1:3323/press   -H 'content-type: application/json'   -d '{\"action\":\"calc.equals\"}' | jq\n</code></pre></p> <p>Agent envelope (recommended) <pre><code>curl -s -X POST http://127.0.0.1:3323/actions   -H 'content-type: application/json'   -H \"Idempotency-Key: $(uuidgen)\"   -d '{\"action\":\"calc.input\",\"params\":{\"digit\":7},\"dry_run\":true,\"intent\":\"enter digit\"}' | jq\n</code></pre></p> <p>TypeScript client <pre><code>const j = await fetch(\"http://127.0.0.1:3323/actions\", {\n  method: \"POST\",\n  headers: { \"content-type\": \"application/json\", \"Idempotency-Key\": crypto.randomUUID() },\n  body: JSON.stringify({ action: \"calc.equals\", dry_run: true, session_id: \"sess_1\" })\n});\nconst res = await j.json(); // { ok?, state, result?, audit_preview?, ... }\n</code></pre></p>"},{"location":"runtime-sandbox/#8-agent-first-dashboard-pattern","title":"8) Agent-first Dashboard pattern","text":"<ol> <li>Model your dashboard UI as JACE views with affordances.</li> <li>Expose those modules through this runtime (or compile your code into JACE).</li> <li>Agents call <code>/view</code> (audience=agent) to understand entities, then <code>/actions</code> to act.</li> <li>Humans can render the same JACE to HTML \u2014 shared semantics, different audience.</li> </ol>"},{"location":"runtime-sandbox/#9-events-optional","title":"9) Events (optional)","text":"<p>If an action returns <code>events</code>, relay them via SSE:</p> <ul> <li>Server: <code>/events</code> streams <code>data: {type,id,ts,entity,changes}\\n\\n</code>.</li> <li>Client: <code>new EventSource(\"/events\")</code> \u2192 react to updates.</li> </ul> <p>This pairs well with long-running workflows and approval steps.</p>"},{"location":"runtime-sandbox/#10-roadmap-runtime","title":"10) Roadmap (runtime)","text":"<ul> <li>Done: isolated QuickJS VM, deterministic clock/RNG, minimal HTTP API, calc module, TS client.</li> <li>Next:</li> <li>Dry-run persistence guard (runtime-level)</li> <li><code>/actions</code> endpoint with JACE envelope + Action Result</li> <li>Session store (host map / Redis / KV)</li> <li>Presentation stripping on <code>audience=agent</code></li> <li>Interrupt/fuel guard &amp; timeouts</li> <li>SSE relay for <code>events</code></li> <li>Capability injection (opt-in IO like KV/crypto/clock)</li> </ul>"},{"location":"runtime-sandbox/#11-security-checklist","title":"11) Security checklist","text":"<ul> <li>Never enable <code>eval</code>, timers, or network inside the VM.</li> <li>Enforce max body size (already done) and timeouts per call.</li> <li>Validate payloads with JSON Schema (Ajv) if user-facing.</li> <li>Treat module code as untrusted unless you own it; review before loading.</li> <li>Log <code>action</code>, <code>params</code>, <code>audit_preview</code>, <code>session_id</code>, <code>Idempotency-Key</code>.</li> </ul>"},{"location":"runtime-sandbox/#12-faq","title":"12) FAQ","text":"<p>Why QuickJS? Tiny, deterministic, embeddable \u2014 perfect for safe Agent Apps.</p> <p>Why actions instead of internal JS calls? Affordances create an explicit, auditable machine interface for agents.</p> <p>How do I connect this to my real data? Inject capabilities via <code>env</code> (e.g., <code>kv</code>, <code>rpc</code>) or wrap the runtime behind a server that translates actions to backend calls.</p>"},{"location":"security/","title":"Security &amp; Governance","text":"<ul> <li>No script in JACE: JACE is data-only (even within <code>presentation</code>).  </li> <li>Strip <code>presentation</code> for agent responses (agent wire schema forbids it).  </li> <li>Validation: schema-validate views/actions/events/results.  </li> <li>Idempotency: include <code>Idempotency-Key</code> on writes.  </li> <li>Two-phase actions: <code>dry_run</code> \u2192 show <code>audit_preview</code> \u2192 commit.  </li> <li>Scopes/capabilities: tie affordances to roles (e.g., <code>tickets:write</code>).  </li> <li>Audit headers: <code>X-Agent-Intent</code>, <code>X-Agent-Trace</code>.  </li> <li>Rate limits &amp; approvals: gate destructive actions.  </li> <li>Accessibility: renderers map semantics to HTML/ARIA (WCAG).  </li> <li>Events hygiene: only meaningful domain changes (no analytics/hydration noise).</li> </ul>"},{"location":"security/#presentation-safety","title":"Presentation Safety","text":"<ul> <li>Allowed keys: <code>tag</code>, <code>variant</code>, <code>tokens</code>, <code>classes</code>, <code>style</code>.</li> <li>Sanitization: reject <code>style</code> containing <code>url(</code>, <code>expression(</code>, or <code>@import</code>.</li> <li>Whitelist tags: <code>div</code>, <code>section</code>, <code>article</code>, <code>button</code>, <code>span</code>, <code>p</code>, <code>ul</code>, <code>ol</code>, <code>li</code>.</li> <li>Agents NEVER see <code>presentation</code>.</li> </ul>"},{"location":"security/#markdown-safety","title":"Markdown Safety","text":"<p>Renderers MUST sanitize Markdown output: - Disallow raw HTML or sanitize it (no <code>&lt;script&gt;</code>, <code>on*=</code> handlers). - For links, add <code>rel=\"noopener noreferrer\"</code> when <code>target=\"_blank\"</code>. - Resolve images to safe origins or proxy them if needed.</p>"},{"location":"security/#headers-audit","title":"Headers &amp; Audit","text":"<ul> <li><code>X-Agent-Intent</code>: optional mirror of body <code>intent</code> for log pipelines.</li> <li><code>X-Agent-Trace</code>: opaque correlation id for distributed tracing.</li> </ul>"},{"location":"security/#approvals-rate-limits-reference","title":"Approvals &amp; Rate Limits (reference)","text":"<ul> <li>For sensitive actions, return <code>error.code = \"POLICY_DENIED\"</code> with <code>hints</code> pointing to approval URLs.</li> <li>Use standard <code>Retry-After</code> on <code>RATE_LIMITED</code> responses.</li> </ul>"},{"location":"security/#audience-is-not-auth","title":"Audience is not auth","text":"<p><code>audience</code> controls visibility per delivery target. It MUST NOT be treated as an authorization mechanism. Servers must validate credentials, scopes, and policies for all actions regardless of audience filtering.</p>"},{"location":"snippets/","title":"Copy-Paste Snippets","text":"<p>Fetch a view (agent) <pre><code>curl -H \"Accept: application/jace+json\" https://example.com/agent/views/tickets/inbox\n</code></pre></p> <p>Render HTML (server-side pseudo) <pre><code>import { renderHtml } from \"../renderers/html/index.js\";\nconst jace = await load();          // internal JACE (may include presentation)\nconst html = renderHtml(jace);      // humans\n</code></pre></p> <p>Strip for agent <pre><code>import { toAgentPayload } from \"../renderers/agent/index.js\";\nconst payload = toAgentPayload(jace); // drop presentation/classes/style\n</code></pre></p> <p>Execute action <pre><code>curl -X POST https://example.com/agent/tickets/t_8129   -H \"Content-Type: application/json\"   -H \"Idempotency-Key: $(uuidgen)\"   -d '{\"action\":\"ticket.update\",\"params\":{\"status\":\"pending\"},\"dry_run\":true}'\n</code></pre></p> <p>Paginated fetch <pre><code>curl -H \"Accept: application/jace+json\"   \"https://example.com/agent/views/tickets/inbox?limit=50&amp;order_by=props.created_at&amp;order_dir=desc\"\n</code></pre></p> <p>SSE client (browser) <pre><code>&lt;script&gt;\n  const ev = new EventSource('/agent/events', { withCredentials: true });\n  ev.addEventListener('ticket.updated', e =&gt; {\n    const data = JSON.parse(e.data);\n    console.log('updated', data);\n  });\n&lt;/script&gt;\n</code></pre></p> <p>Manifest link tags <pre><code>&lt;link rel=\"agent-manifest\" href=\"/.well-known/agent-manifest\"&gt;\n&lt;link rel=\"alternate\" type=\"application/jace+json\" href=\"/page?format=jace\"&gt;\n</code></pre></p> <p>Audience-targeted fetch (agent) <pre><code>curl -H \"Accept: application/jace+json\"   -X POST https://example.com/view -d '{\"audience\":\"agent\"}'\n</code></pre></p> <p>Filter per audience (server) <pre><code>const agentView = toAudiencePayload(jace, 'agent'); // strips human-only nodes + presentation\nconst humanView = toAudiencePayload(jace, 'human'); // strips agent-only nodes\n</code></pre></p>"},{"location":"specs/aria-mapping/","title":"JACE \u2192 HTML/ARIA Mapping (Reference)","text":"JACE type HTML Required Recommended section <code>&lt;section&gt;</code> landmark present aria-labelledby when titled card <code>&lt;article&gt;</code> role=\"region\" tabindex=\"-1\" for focus management button <code>&lt;button&gt;</code> keyboard activation aria-pressed for toggles paragraph <code>&lt;p&gt;/&lt;div&gt;</code> semantic grouping none image <code>&lt;img&gt;</code> <code>alt</code> text required <code>loading=\"lazy\"</code> recommended"},{"location":"specs/content-negotiation/","title":"Content Negotiation Precedence","text":"<p>1) <code>?format=jace|html</code> \u2192 explicit 2) <code>audience=agent|human</code> (where supported) 3) <code>Accept: application/jace+json | text/html</code> (optionally with <code>profile=\u2026</code>) 4) default: <code>text/html</code></p>"},{"location":"specs/content-negotiation/#caching-headers","title":"Caching &amp; Headers","text":"<p>Servers SHOULD set <code>Vary: Accept</code> on views so caches keep HTML and JACE variants separately.</p>"},{"location":"specs/content-negotiation/#audience-vs-accept","title":"Audience vs Accept","text":"<p><code>audience</code> is a node-level filter (agent/human/both) applied to the JACE tree before delivery. It does not replace <code>Accept</code>\u2014<code>Accept</code> still determines the representation (JACE JSON vs HTML).</p>"},{"location":"specs/content-negotiation/#media-type-profile","title":"Media Type Profile","text":"<p>Servers MAY include <code>profile</code> on <code>Content-Type</code> / <code>Accept</code> to indicate JACE profile, e.g.: <code>application/jace+json;profile=\"https://example.com/profiles/JACE/0.1\"</code>.</p>"},{"location":"specs/errors/","title":"Error Codes","text":"<p>Canonical codes \u2192 HTTP:</p> <ul> <li><code>INVALID_PARAMS</code> \u2192 400</li> <li><code>UNAUTHORIZED</code> \u2192 401</li> <li><code>FORBIDDEN</code> \u2192 403</li> <li><code>NOT_FOUND</code> \u2192 404</li> <li><code>CONFLICT</code> \u2192 409</li> <li><code>PRECONDITION_FAILED</code> \u2192 412</li> <li><code>RATE_LIMITED</code> \u2192 429</li> <li><code>POLICY_DENIED</code> \u2192 451</li> <li><code>INTERNAL</code> \u2192 500</li> <li><code>DRY_RUN_UNSUPPORTED</code> \u2192 501</li> </ul> <p>Servers MUST map <code>error.code</code> to HTTP as specified above.</p>"},{"location":"specs/errors/#error-envelope-wire","title":"Error Envelope (Wire)","text":"<p>For non-2xx, return:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"INVALID_PARAMS\",\n    \"message\": \"status must be one of: open,pending,closed\",\n    \"hints\": [\"Use 'pending' to triage\"],\n    \"details\": { \"field\": \"params.status\" }\n  }\n}\n</code></pre>"},{"location":"specs/pagination/","title":"Pagination \u2014 Canonical Contract","text":"<p>Requests: <code>cursor</code>, <code>limit</code>, <code>order_by</code>, <code>order_dir</code>. Responses: include <code>pagination</code> with both <code>cursor</code> and <code>next_cursor</code> when applicable. Implement stable sort with <code>(order_by, id)</code>.</p> <p>Agents SHOULD keep <code>cursor</code> per-view to resume. Servers MAY include <code>links</code> with <code>rel=next|prev</code>. Cursors MUST be opaque and SHOULD remain valid for at least 24h.</p>"},{"location":"specs/pagination/#example","title":"Example","text":"<p>Request <pre><code>GET /agent/views/tickets/inbox?limit=50&amp;order_by=props.created_at&amp;order_dir=desc&amp;cursor=c0\n</code></pre></p> <p>Response <pre><code>{\n  \"items\": [/* ... */],\n  \"pagination\": {\n    \"cursor\": \"c0\",\n    \"next_cursor\": \"c1\",\n    \"prev_cursor\": null,\n    \"limit\": 50,\n    \"order_by\": \"props.created_at\",\n    \"order_dir\": \"desc\"\n  },\n  \"links\": [\n    { \"rel\": \"next\", \"href\": \"/agent/views/tickets/inbox?cursor=c1&amp;limit=50&amp;order_by=props.created_at&amp;order_dir=desc\" }\n  ]\n}\n</code></pre></p> <p>Stability Servers MUST implement a stable sort using <code>(order_by, id)</code> as a tiebreaker to avoid dupes/skips across pages.</p>"}]}